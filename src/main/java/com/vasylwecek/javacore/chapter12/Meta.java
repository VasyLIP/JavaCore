package chapter12;
/***
 * Этот код демонстрирует, как в Java можно использовать аннотации для
 * добавления метаданных к коду и как получить эти метаданные во время
 * выполнения программы.
 */


/***
 * Представьте, что у вас есть книга (класс), и вы хотите добавить к ней закладку (аннотацию),
 * чтобы быстро найти интересующий вас раздел (метод).
 * Аннотация не только помогает найти нужное место,
 * но и содержит небольшую заметку (метаданные),
 * которую вы можете прочитать и узнать что-то важное о разделе, не открывая его.
 */

import java.lang.annotation.*;
import java.lang.reflect.*;
/*
Это мета-аннотация, которая указывает, что аннотация MyAnno должна быть
сохранена в байт-коде после компиляции и доступна во время выполнения
через отражение (reflection).
 */
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno{
    String str(); // для строк
    int val(); //  для целочисленных значений.
}

public class Meta {
    // аннотировать метод
    @MyAnno(str = "Пример аннотации", val = 100)
    public static void myMeth(){
        Meta ob = new Meta();

        // получить аннотацию из метода
        // и вывести значения ее членов
        try{
            // сначала получить объект типа Class,
            // представляющий данный класс
            Class<?> c = ob.getClass();

            // затем получить объект типа Мethod,
            // представляющий данный метод
            Method m = c.getMethod("myMeth");

            // далее получить аннотацию для данного класса
            MyAnno anno = m.getAnnotation(MyAnno.class);

            // и наконец , вывести значения членов аннотации
            System.out.println(anno.str() + " " + anno.val());
        }catch (NoSuchMethodException exc){
            System.out.println("Meтoд не найден.");
        }
    }

    public static void main(String[] args) {
        myMeth();
    }
}
