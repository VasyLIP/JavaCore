Лямбда-выражения в Java действительно являются анонимными методами, которые
    - используются для реализации методов, определяемых в функциональных интерфейсах.
    - Лямбда-выражения упрощают процесс написания и использования функциональных
     интерфейсов, делая код более компактным и читаемым.

Основы лямбда-выражений
    - Лямбда-выражение — это способ представления функции или метода в виде анонимного
        блока кода, который можно передать и выполнить. Лямбда-выражение состоит из трех частей:
          Список параметров: Перечисляются параметры, которые принимает лямбда-выражение.
          Стрелка (->): Разделяет параметры и тело лямбда-выражения. Операция -> буквально означает "становиться" или "переходить".
          Тело: Содержит выражение или блок кода, который выполняется при вызове лямбда-выражения.
            Функциональные интерфейсы
                Функциональный интерфейс — это интерфейс с единственным абстрактным методом.
                    Именно этот метод реализуется с помощью лямбда-выражения. Функциональные
                    интерфейсы могут иметь дополнительные методы по умолчанию и статические методы.
Функциональные интерфейсы:
    - interface MyNumber{
    double getValue();
    }
    - MyNumber myNum; // ссылка на функциональный интерфейс МyNumber;
      myNum = () -> 123.45; // использовать лямбда-выражение в контексте присваивания;
Блочные лямбда-выражения:
     - Блочное лямбда-выражение позволяет выполнять более сложные операции, поскольку
     его тело может содержать несколько операторов. Это делает лямбда-выражения более
     гибкими и мощными. Внутри блочного лямбда-выражения можно объявлять переменные,
     использовать операторы выбора (if, switch), циклы (for, while), создавать вложенные
     блоки и т.д.

Обобщенные функциональные интерфейсы:
    -

Лямбда-выражения и исключения:
     - https://habr.com/ru/companies/otus/articles/697498/

Передача лямбда-выражений в качестве аргументов:
    -

Ссылки на методы:
    - Ссылки на методы в Java — это мощная функция, связанная с лямбда-выражениями. Она позволяет ссылаться на методы и использовать их, не вызывая напрямую. Это особенно полезно в сочетании с функциональными интерфейсами и лямбда-выражениями. Ссылки на методы обеспечивают более компактный и читаемый код.

    - Виды ссылок на методы
    - В Java существуют четыре типа ссылок на методы:

    - Ссылка на статический метод: ClassName::staticMethodName
    - Ссылка на метод экземпляра конкретного объекта: instance::instanceMethodName
    - Ссылка на метод экземпляра произвольного объекта конкретного типа: ClassName::instanceMethodName
    - Ссылка на конструктор: ClassName::new
Ссыпки на методы экэемппяра:
    -
Ссыпки на обобщенные методы:
    -

Ссылки на конструкторы:
    - имя_класса::new
    -

Предопределенные функциональные интерфейсы:
    - UnaryOperator <T> - Интерфейс UnaryOperator<T> представляет собой операцию над
    одним операндом того же типа, что и результат. Содержит метод apply().
    - BinaryOperator <T> представляет собой операцию над двумя операндами того же типа,
    что и результат. Содержит метод apply().
    - Consumer <T> представляет операцию, которая принимает один входной аргумент и
    не возвращает результата. Содержит метод accept().
    - Supplier<T> представляет собой операцию, которая не принимает аргументов и
    возвращает результат. Содержит метод get().
    - Function<T, R> представляет собой функцию, которая принимает один аргумент и
    возвращает результат. Содержит метод apply().
    - Predicate <T> представляет собой функцию, которая принимает один аргумент и
    возвращает логическое значение. Содержит метод test().