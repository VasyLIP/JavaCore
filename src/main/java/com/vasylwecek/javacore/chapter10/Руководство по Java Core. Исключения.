Исключение – это проблема, которая возникает во время выполнения программы.
    Исключение может быть вызвано, одним из таких процессов:
        Нехватка физической памяти
        Ввод пользователем некорректных данных
        Искомый файл не существует
        Потеря соединения с сетью и т.д.

        Методы класса Throwable:
            public String getMessage() - Возвращает детальное сообщение о вызванном исключении.
            public Throwable getCause() - Возвращает причину исключения.
            public String toString() - Возвращает имя класса и является частью результат метода getMessage().
            public void printStackTrace() - Выводит результат метода toString() вместе с цепочкой исключений в выходной поток System.err
            public StackTraceElement[] getStackTrace() - Возвращает массив, который содержит  каждый элемент цепочки исключения.
                0 элемент массива является верхним элементом стека, а крайний – нижним.
            public Throwable fillinStackTrace() - Заполняет стэк объекта Throwable текущим стеком исключения, добавляясь к предыдущей информации в стеке.



        Проверяемые исключения:
            1. Проверяемые исключения (checked exceptions) — это исключения,
                которые проверяются во время компиляции.
            2. Программист обязан обработать такие исключения, иначе программа
                не скомпилируется.
            3. Пример проверяемого исключения: FileNotFoundException, возникающее при
                попытке доступа к несуществующему файлу.

        Непроверяемые исключения в Java:
            1. Непроверяемые исключения (unchecked exceptions) — это исключения,
                которые возникают во время выполнения программы.
            2. Эти исключения являются подклассами RuntimeException
            3. Программист не обязан явно обрабатывать такие исключения,
                и программа скомпилируется даже без обработки этих исключений.
            4. Непроверяемые исключения являются важной частью механизма обработки
                ошибок в Java.
            5. Эти исключения возникают во время выполнения программы и не проверяются
                компилятором.
            6. Обработка непроверяемых исключений помогает сделать программы более
                устойчивыми к ошибкам, возникающим из-за логических ошибок в коде.


        Ошибки в Java:
            1. Ошибки (errors) обычно игнорируются компилятором, так как они происходят
                во время выполнения программы, когда что-то идет не так.
            2. Ошибки являются подклассами Error и указывают на серьезные проблемы,
                которые обычно не могут быть обработаны программой.
            3. Природа ошибок
                Ошибки представляют собой серьезные проблемы, которые обычно не могут
                    быть обработаны программой.
               Примеры ошибок:
               StackOverflowError — переполнение стека вызовов.
               OutOfMemoryError — нехватка памяти.
               VirtualMachineError — проблемы с виртуальной машиной Java.

        Обработка исключений:
            try {
            code that can call an exception
            } catch (SomeException ex) {
            sequence of actions in case of exception
            }

        Ключевые слова throw/throws:
            1. throw и throws — ключевые слова, используемые для работы с исключениями в Java.
            2. throw используется для явного генерирования исключений.
            3. throws указывает на возможность возникновения исключения в методе.

        Блок finally:
            1. Блок finally может быть частью блока try/catch и код, который
                находится в нём, будет выполнен в любом случае (только если мы не
                    “положим” JVM).

        Блок try/catch с ресурсами:
            1. try-with-resources — конструкция в Java, которая автоматически закрывает
                ресурсы после завершения работы с ними.
            2. Ресурсы, такие как файлы, соединения и потоки, должны быть закрыты
                после использования для освобождения системных ресурсов.
            3. Конструкция try-with-resources была введена в Java 7 и упрощает
                управление ресурсами, обеспечивая автоматическое закрытие ресурсов.
