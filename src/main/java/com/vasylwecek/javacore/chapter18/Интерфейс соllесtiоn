Интерфейсы Collections Framework:

    - Collection
        Этот интерфейс позволяет нам работать с группами объектов.
    - List
        Наследует класс Collection и является упорядоченным списком элементов.
    - Set
        Наследует класс Collection, и содержит множество уникальных элементов.
    - SortedSet
        Наследует Set и является упорядоченным множеством уникальных элементов.
    - Map
        Хранит уникальные элементы типа “ключ – значение”.
    - Map.Entry
        Описывает элемент в Map. Внутренний класс Map.
    - SortedMap
        Расширяет класс Map, и сортирует элементы по возрастанию.
    - Enumeration
        Интерфейс, который определяет методы для “перебора” элементов в коллекции. Заменён интерфейсом Iterator.

Интерфейс соllесtiоn:
    - interface Collection<E>;

    основные типы исключений, которые могут возникнуть при использовании методов интерфейса Collection:
        - UnsupportedOperationException - Это исключение выбрасывается, когда операция не поддерживается
        реализацией коллекции. Например, если попытаться добавить элемент в неизменяемую коллекцию;
        - ClassCastExceprion -  Выбрасывается, когда объект неправильного типа вставляется в
        коллекцию, которая ограничена элементами конкретного типа;
        - NullPointerException - Это исключение выбрасывается, если в коллекцию пытаются добавить null,
        и коллекция не поддерживает значения null. Например, многие реализации Queue и Set не допускают null элементы.
        - IllegalArgumentException: Выбрасывается, если какой-то аргумент метода не соответствует ожиданиям.
        Например, попытка вставить элемент, который по какой-либо причине не допустим для коллекции, может привести к этому исключению.
        - ConcurrentModificationException: Это исключение часто встречается при итерировании коллекции (например, при использовании
        итератора) и одновременном изменении коллекции другим потоком или даже в текущем потоке, но вне итератора.
        Например, удаление элементов из ArrayList во время итерации по нему с помощью итератора, не используя сам итератор для удаления.

Добавление элементов:
    - add(E e): Добавляет элемент в коллекцию. Элемент должен быть совместим с типом коллекции.
    - addAll(Collection<? extends E> c): Добавляет все элементы из одной коллекции в другую.

Удаление элементов:
    - remove(Object o): Удаляет один экземпляр указанного элемента из коллекции.
    - removeAll(Collection<?> c): Удаляет все элементы, присутствующие в указанной коллекции, из текущей коллекции.
    - retainAll(Collection<?> c): Удаляет все элементы, кроме тех, которые указаны в другой коллекции.
    - removeIf(Predicate<? super E> filter) (JDK 8): Удаляет элементы, удовлетворяющие заданному предикату.
    - clear(): Очищает коллекцию, удаляя все элементы.

Проверка наличия элементов:
    - contains(Object o): Проверяет, содержит ли коллекция указанный элемент.
    - containsAll(Collection<?> c): Проверяет, содержит ли коллекция все элементы другой коллекции.
    - isEmpty(): Проверяет, пуста ли коллекция.
    - size(): Возвращает количество элементов в коллекции.

Преобразование в массив:
    - toArray(): Возвращает массив типа Object, содержащий все элементы коллекции.
    - toArray(T[] a): Возвращает массив элементов того же типа, что и указанный массив.
    Предпочтительнее, так как возвращает массив нужного типа.

Сравнение коллекций:
    - equals(Object o): Сравнивает две коллекции на равенство. Определение равенства зависит от конкретной реализации коллекции.

Итераторы:
    - iterator(): Возвращает итератор для коллекции.
    - spliterator(): Возвращает итератор-разделитель для коллекции (новый метод).
    - stream() и parallelStream(): Возвращают поток элементов для последовательной или параллельной обработки (подробнее описано в главе 29).
