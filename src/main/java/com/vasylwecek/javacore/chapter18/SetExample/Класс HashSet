Класс HashSet расширяет класс AbstractSet и реализует интерфейс Set.
    Он используется для создания коллекции, в которой элементы хранятся в виде
    хеш-таблицы. Этот класс является обобщенным и объявляется следующим образом:
        class HashSet<E>, где E обозначает тип объектов, которые будут храниться в хеш-множестве.
    Основные характеристики:
        - Хеширование: Для хранения данных используется механизм хеширования.
            Содержимое ключа преобразуется в хеш-код, который служит индексом для
            сохранения данных.
        - Постоянное время выполнения:
            Методы add(), contains(), remove() и size() выполняются за постоянное
            время O(1), даже для больших множеств.
        - Неупорядоченность: Элементы в HashSet не гарантируют упорядоченности.

    Конструкторы:
        - HashSet()
            Создает пустое хеш-множество с начальной емкостью по умолчанию (16) и
            коэффициентом заполнения (0.75).
        - HashSet(Collection<? extends E> c)
            Создает хеш-множество, инициализированное элементами из коллекции c.
        - HashSet(int capacity)
            Создает хеш-множество с заданной начальной емкостью.
        - HashSet(int capacity, float loadFactor)
            Создает хеш-множество с заданной начальной емкостью и коэффициентом
            заполнения. Коэффициент заполнения определяет, насколько заполненным
            должно быть множество, прежде чем его размер будет увеличен. Значение
            коэффициента должно быть от 0.0 до 1.0. По умолчанию используется
            значение 0.75.

    Особенности класса HashSet:
        - Уникальность: HashSet гарантирует, что в коллекции не будет дубликатов.
        - Неупорядоченность: Порядок элементов не гарантируется и может меняться.
        - Высокая производительность: Благодаря хешированию, операции добавления, удаления и проверки наличия элемента выполняются быстро.
        - Начальная емкость и коэффициент заполнения: Емкость увеличивается автоматически по мере добавления новых элементов.
    Преимущества использования HashSet:
        - Быстрая работа: Операции выполняются за константное время O(1).
        - Простота использования: HashSet легко использовать для хранения уникальных элементов.

    Класс HashSet предоставляет эффективный способ хранения уникальных элементов с
        быстрым доступом, добавлением и удалением. Его использование оправдано в
        ситуациях, когда не требуется упорядоченность элементов, но важна
        производительность операций.














