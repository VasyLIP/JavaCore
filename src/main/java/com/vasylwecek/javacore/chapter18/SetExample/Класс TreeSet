Класс TreeSet расширяет класс AbstractSet и реализует интерфейс NavigableSet.
    Этот класс используется для создания коллекции, в которой элементы хранятся в
    отсортированном порядке с использованием древовидной структуры. TreeSet
    является обобщенным классом и объявляется следующим образом:
        class Treeset<E>, де E обозначает тип объектов, которые будут храниться в древовидном множестве.

    Основные характеристики:
        - Отсортированное множество: Элементы хранятся в отсортированном порядке по возрастанию.
        - Быстрый доступ: Время доступа и извлечения элементов достаточно мало, что делает
            TreeSet отличным выбором для хранения больших объемов отсортированных данных.
        - Реализация NavigableSet: Поддерживает навигационные методы для работы с
            подмножествами и другими операциями.

    Конструкторы:
        - TreeSet()
            Создает пустое древовидное множество, элементы которого будут
                отсортированы в естественном порядке.
        - TreeSet(Collection<? extends E> c)
            Создает древовидное множество, содержащее элементы из коллекции c.
        - TreeSet(Comparator<? super E> comparator)
            Создает пустое древовидное множество, элементы которого будут
            отсортированы с использованием заданного компаратора.
        - TreeSet(SortedSet<E> ss)
            Создает древовидное множество, содержащее элементы из заданного
            отсортированного множества ss.

    Особенности класса TreeSet:
        - Отсортированное множество: TreeSet автоматически располагает элементы в отсортированном порядке.
        - Навигационные методы: Поддержка методов интерфейса NavigableSet, таких как subSet(), headSet(), tailSet();
        - Поддержка компараторов: Возможность использовать собственные компараторы для задания порядка сортировки.

Класс TreeSet в Java предоставляет мощную и гибкую структуру данных для работы с
    отсортированными множествами. Он автоматически поддерживает порядок элементов
    и позволяет выполнять множество навигационных операций, что делает его идеальным
    выбором для работы с отсортированными данными.




















