Интерфейс NavigableSet расширяет интерфейс SortedSet и предоставляет дополнительные
    методы для выполнения навигационных операций, таких как поиск ближайших совпадений.

    Он является обобщенным и объявляется следующим образом:
        interface NavigableSet<E>
            где E обозначает тип объектов, содержащихся в множестве.

Основные характеристики интерфейса NavigableSet:
    Расширяет SortedSet: Наследует все методы SortedSet и добавляет новые возможности.
    Навигационные операции: Предоставляет методы для поиска ближайших меньших или больших
        элементов относительно заданного значения.

Методы интерфейса NavigableSet:
    E lower(E e)
    Описание: Возвращает наибольший элемент в наборе, который меньше заданного элемента e.
        Если такого элемента нет, возвращает null.
    Пример:
        E lowerElement = navigableSet.lower(e);

    E floor(E e)
    Описание: Возвращает наибольший элемент в наборе, который меньше или равен заданному элементу e.
        Если такого элемента нет, возвращает null.
    Пример:
        E floorElement = navigableSet.floor(e);

    E ceiling(E e)
    Описание: Возвращает наименьший элемент в наборе, который больше или равен заданному элементу e.
        Если такого элемента нет, возвращает null.
    Пример:
        E ceilingElement = navigableSet.ceiling(e);

    E higher(E e)
    Описание: Возвращает наименьший элемент в наборе, который больше заданного элемента e.
        Если такого элемента нет, возвращает null.
    Пример:
        E higherElement = navigableSet.higher(e);

    E pollFirst()
    Описание: Удаляет и возвращает первый (наименьший) элемент из набора. Если набор пуст, возвращает null.
    Пример:
        E firstElement = navigableSet.pollFirst();

    E pollLast()
    Описание: Удаляет и возвращает последний (наибольший) элемент из набора. Если набор пуст, возвращает null.
    Пример:
        E lastElement = navigableSet.pollLast();

    NavigableSet<E> descendingSet()
    Описание: Возвращает набор, который является обратным представлением текущего набора.
    Пример:
        NavigableSet<E> descendingSet = navigableSet.descendingSet();

    Iterator<E> descendingIterator()
    Описание: Возвращает итератор для прохода по элементам набора в обратном порядке.
    Пример:
        Iterator<E> descendingIterator = navigableSet.descendingIterator();

Обработка исключений:
    ClassCastException: Если заданный объект не совместим с элементами множества.
    NullPointerException: Если используется null объект, когда множество не допускает null значения.
    IllegalArgumentException: Если передан неверный аргумент.

    Эти методы предоставляют мощные возможности для работы с отсортированными множествами,
    позволяя легко находить и извлекать элементы на основе их значений относительно других
    элементов в наборе.