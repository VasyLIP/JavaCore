Интерфейс SortedSet расширяет интерфейс Set и определяет поведение множеств,
    отсортированных в порядке возрастания. Он является обобщенным и объявляется следующим образом:
    interface SortedSet <E>; Где E обозначает тип объектов, которые должно содержать множество.

    Основные характеристики интерфейса SortedSet:
        Отсортированные элементы: Элементы в SortedSet всегда хранятся в отсортированном порядке.
        Поддержка естественного порядка или компаратора: Элементы могут быть отсортированы по их
            естественному порядку (используя Comparable) или по порядку, определяемому компаратором.

    Методы интерфейса SortedSet:
        Comparator<? super E> comparator()
        Описание: Возвращает компаратор, используемый для сортировки элементов в множестве.
            Если используется естественный порядок сортировки, возвращается null.
        Пример:
        SortedSet<String> set = new TreeSet<>();
        Comparator<? super String> comp = set.comparator();

        E first()
        Описание: Возвращает первый (минимальный) элемент в отсортированном множестве.
        Пример:
        String firstElement = set.first();

        E last()
        Описание: Возвращает последний (максимальный) элемент в отсортированном множестве.
        Пример:
        String lastElement = set.last();

        SortedSet<E> headSet(E toElement)
        Описание: Возвращает подмножество элементов, которые предшествуют указанному элементу (
            toElement), не включая его.
        Пример:
        SortedSet<String> headSet = set.headSet("mango");

        SortedSet<E> subSet(E fromElement, E toElement)
        Описание: Возвращает подмножество элементов, начиная с элемента fromElement
            (включительно) до элемента toElement (исключительно).
        Пример:
        SortedSet<String> subSet = set.subSet("apple", "mango");

        SortedSet<E> tailSet(E fromElement)
        Описание: Возвращает подмножество элементов, начиная с элемента fromElement
            (включительно) до конца множества.
        Пример:
        SortedSet<String> tailSet = set.tailSet("mango");

    Обработка исключений:
        Методы интерфейса SortedSet могут генерировать следующие исключения:

        NoSuchElementException: Если в множестве отсутствуют элементы (например, при вызове first()
            или last() на пустом множестве).
        ClassCastException: Если объект не совместим с элементами множества.
        NullPointerException: Если используется null объект, когда множество не допускает null
            элементы.
        IllegalArgumentException: Если указан неверный аргумент (например, несоответствующий
            диапазон в subSet).