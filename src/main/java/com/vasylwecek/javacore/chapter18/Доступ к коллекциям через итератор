При работе с коллекциями в Java часто требуется перебрать все элементы коллекции, например, чтобы вывести
    каждый элемент или выполнить какие-то операции с каждым элементом. Для этого можно использовать
    итераторы, которые являются объектами классов, реализующих интерфейсы Iterator или ListIterator.

    - Iterator: Позволяет организовать цикл для перебора коллекции, извлекая или удаляя элементы.
    - ListIterator: Расширяет интерфейс Iterator и позволяет двусторонний обход списка и изменение
        его элементов.

    interface Iterator<E>
    interface ListIterator<E>
        - где E обозначает тип перебираемых объектов.

    Методы интерфейса Iterator:
        - default void forEachRemaining(Consumer<? super E> action)
            Выполняет заданное действие над каждым необработанным элементом коллекции (добавлен в JDK 8).
        - boolean hasNext()
            Возвращает true, если в коллекции еще есть элементы, иначе false.
        - E next()
            Возвращает следующий элемент из коллекции. Генерирует NoSuchElementException, если
            элементов больше нет.
        - void remove()
            Удаляет текущий элемент из коллекции. Генерирует IllegalStateException, если вызов remove()
            не предшествовал вызову next(). По умолчанию генерирует UnsupportedOperationException.
    Методы интерфейса ListIterator:
        - void add(E e)
            Вставляет заданный элемент перед элементом, который должен быть возвращен в результате
            следующего вызова метода next().
        - default void forEachRemaining(Consumer<? super E> action)
            Выполняет заданное действие над каждым необработанным элементом коллекции (добавлен в JDK 8).
        - boolean hasNext()
            Возвращает true, если в списке есть следующий элемент, иначе false.
        - boolean hasPrevious()
            Возвращает true, если в списке есть предыдущий элемент, иначе false.
        - E next()
            Возвращает следующий элемент из списка. Генерирует NoSuchElementException,
            если следующего элемента нет.
        - int nextIndex()
            Возвращает индекс следующего элемента в списке. Возвращает размер списка, если следующего
            элемента нет.
        - E previous()
            Возвращает предыдущий элемент из списка. Генерирует NoSuchElementException, если
            предыдущего элемента нет.
        - int previousIndex()
            Возвращает индекс предыдущего элемента в списке. Возвращает -1, если предыдущего элемента нет.
        - void remove()
            Удаляет текущий элемент из списка. Генерирует IllegalStateException, если вызов remove()
            не предшествовал вызову next() или previous().
        - void set(E e)
            Заменяет текущий элемент на заданный элемент. Генерирует IllegalStateException, если вызов
            set() не предшествовал вызову next() или previous().

Использование итераторов в Java позволяет гибко и эффективно перебирать элементы коллекций.
    Интерфейс Iterator предоставляет основные методы для перебора и удаления элементов, тогда как
        интерфейс ListIterator расширяет его, добавляя возможности двустороннего обхода и изменения
        элементов списка.

















