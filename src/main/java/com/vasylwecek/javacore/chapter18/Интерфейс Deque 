Интерфейс Deque (Double Ended Queue) расширяет интерфейс Queue и определяет
    поведение двусторонней очереди, которая может функционировать как стандартная
    очередь (FIFO) или как стек (LIFO). Он является обобщенным и объявляется
    следующим образом:
        interface Degue<E>; где E обозначает тип объектов, которые будет содержать двусторонняя очередь.

    Основные методы интерфейса Deque:
        Добавление элементов:
            void addFirst(E e) - Вставляет элемент в голову очереди. Генерирует
                IllegalStateException, если очередь фиксированной длины заполнена.
            void addLast (E e) - Вставляет элемент в хвост очереди. Генерирует
                IllegalStateException, если очередь фиксированной длины заполнена.
            boolean offerFirst(E e) - Пытается вставить элемент в голову очереди.
                Возвращает true при успешном добавлении и false, если очередь заполнена.
            boolean offerLast(E e) - Пытается вставить элемент в хвост очереди.
                Возвращает true при успешном добавлении и false, если очередь заполнена.
            void push(E e) -  Вставляет элемент в голову очереди. Генерирует
                IllegalStateException, если очередь фиксированной длины заполнена.

        Удаление элементов:
            E removeFirst() - Удаляет и возвращает элемент из головы очереди.
                Генерирует NoSuchElementException, если очередь пуста.
            E removeLast() - Удаляет и возвращает элемент из хвоста очереди.
                Генерирует NoSuchElementException, если очередь пуста.
            E pollFirst() - Удаляет и возвращает элемент из головы очереди.
                Возвращает null, если очередь пуста.
            E pollLast() - Удаляет и возвращает элемент из хвоста очереди.
                Возвращает null, если очередь пуста.
            E pop() - Удаляет и возвращает элемент из головы очереди.
                Генерирует NoSuchElementException, если очередь пуста.

        Получение элементов:
            E getFirst() - Возвращает элемент из головы очереди без удаления.
            E getLast() - Возвращает элемент из хвоста очереди без удаления.
            E peekFirst() - Возвращает элемент из головы очереди без удаления.
            E peekLast() - Возвращает элемент из хвоста очереди без удаления.

        Удаление по значению:
            boolean removeFirstOccurrence(Object o):
                Удаляет первый экземпляр указанного элемента из очереди.
                Возвращает true при успешном удалении и false, если элемент
                не найден.
            boolean removeLastOccurrence(Object o):
                Удаляет последний экземпляр указанного элемента из очереди.
                Возвращает true при успешном удалении и false, если элемент
                не найден.

        Итерация:
            Interator<E> descendingInterator() - Возвращает итератор для обхода элементов от хвоста к голове очереди.

    Исключения, генерируемые методами Deque:
        ClassCastException: Если объект несовместим с элементами очереди.
        NullPointerException: Если предпринимается попытка добавить null, а
            очередь не допускает null элементы.
        IllegalArgumentException: Если передан неверный аргумент.
        IllegalStateException: Если очередь фиксированной длины заполнена и
            добавление нового элемента невозможно.
        NoSuchElementException: Если предпринимается попытка удалить или
            получить элемент из пустой очереди.
    Важные аспекты:
        Двусторонняя очередь: Deque может функционировать как очередь (FIFO) или
            как стек (LIFO).
        Гибкость добавления и удаления: Поддерживаются операции добавления и
            удаления элементов как с головы, так и с хвоста очереди.
    Ограниченная емкость: Если Deque ограничена по емкости, методы addFirst и
        addLast генерируют исключение, а методы offerFirst и offerLast возвращают false.

















































