В Java строки представляют собой объекты класса String. Эти объекты неизменяемы, что означает, что после их создания их содержимое не может быть изменено. Если требуется изменить строку, создаётся новый объект String с изменённым содержанием.

Для управления строками, которые могут изменяться после создания, в Java предлагаются классы StringBuffer и StringBuilder. Эти классы также включены в пакет java.lang и являются частью стандартной библиотеки Java. Класс StringBuffer предназначен для работы со строками в многопоточной среде, где требуется синхронизация, тогда как StringBuilder более эффективен в однопоточных приложениях благодаря отсутствию синхронизации.

Все три класса (String, StringBuffer, StringBuilder) реализуют интерфейс CharSequence, который позволяет работать с последовательностями символов в унифицированном стиле.

Особенности работы с классом String в Java:

Неизменяемость: После создания строки её содержимое не может быть изменено. Это повышает производительность, особенно при использовании строк как ключей в HashMap или элементов в HashSet.
Методы класса String: В Java для строки доступны различные методы, такие как сравнение, поиск подстрок, изменение регистра и конкатенация.
Безопасность ссылок: Хотя объект строки сам по себе неизменяем, ссылка на строку может быть изменена для указания на другой объект String.

Конструкторы символьных строк:
    - создается экземпляр класса String, не содержащий символы:
        - String s = new String();
    - конструктор:
        - String (char символы[]);
    - char chars[] = { 'a', 'b', 'c' };
    String s = new String(chars);
    Используя следующий конструктор, можно задать поддиапазон, т.е. определен-
    ную часть массива символов для инициализации ними строки:
        - String (char символы[], int начальный_индекс, int количество_символов)
    - Используя следующий конструктор, можно создать объект типа String, содер­ жащий ту же последовательность символов, что и другой объект типа String:
        - String(String строковый_объект)

    - String предоставляются конструкторы, инициализирующие символьную строку массивом типа byte. Ниже приведена общая форма этих конструкторов:
        - String (byte символы[]);
        - String (byte символы[], int начальный_индекс, int количество_символов)

    - Объект типа String можно создать из объекта типа StringBuffer, используя следующий конструктор:
        - String (StringBuilder обьект_простроения_строки)

Длина символьной строки:
    - int length();

Сцепление строк:
    - String age = "9";
    String s = "Ему " + age + " лет."
    System.out.println(s);


Метод charAt():
    - Чтобы извлечь из строки единственный символ, достаточно обратиться к нему непосредственно, вызвав метод charAt ( } . Ниже приведена общая форма этого метода.
         - char charAt(int где);
         - char ch;
            ch = "abc".charAt(1);

Метод getChars ():
     - Метод getChars() в Java используется для извлечения нескольких символов из строки сразу. Этот метод очень полезен, когда вам нужно скопировать определенный диапазон символов из строки в массив символов. Вот как вы можете использовать метод getChars():
     - void getChar( int начало_источника, int конец_источника, char адресат[], int начало_адресата)
     - getChar():
     class getCharsDemo{
     public static void main(String args[]){
     String s = "Это демонстрация метода getChars ( ) . ";
     int start = 4;
     int end = 8;
     char buf[] = new char[end - start];
     s.getChars(start, end, buf, 0);
     System.out.println(buf);
     }
     }

Метод getBytes ():
    - Метод getBytes() в Java преобразует строку в массив байтов, используя указанную
    кодировку или кодировку по умолчанию, если кодировка не указана. Это часто
    используется при работе с потоками ввода/вывода, сетевыми передачами или просто
    для конвертации строк в байты для определённой обработки.

      Варианты метода getBytes()
      byte[] getBytes()

      Преобразует строку в массив байтов с использованием платформенной кодировки по умолчанию.
      byte[] getBytes(Charset charset)

      Преобразует строку в массив байтов, используя указанный объект Charset.
      byte[] getBytes(String charsetName)

      Преобразует строку в массив байтов, используя имя кодировки, которое может вызвать
      исключение UnsupportedEncodingException, если кодировка не поддерживается.

Метод toCharArray():
    - Метод toCharArray() в Java класса String преобразует строку в новый массив символов.
    Этот метод полезен, когда вам нужно получить массив символов из строки для последующей
    обработки каждого символа в цикле или для использования в методах, которые требуют на
    вход массив символов.
    - char[] toCharArray();

Сравнение символьных строк:
    - Метод equals() сравнивает содержимое двух строк и возвращает true, если строки идентичны;
        - boolean equals(Object строка);

    - Метод equalsIgnoreCase() сравнивает две строки, игнорируя различия в регистре символов;
         - boolean equalsIgnoreCase(Object строка);

Метод regionМatches():
    - Метод regionMatches() в Java класса String предоставляет возможность сравнивать подстроки
    в двух строках, что может быть полезно для более детального контроля над процессом сравнения.
    Этот метод позволяет проверить, равны ли подстроки двух строк в указанных регионах, учитывая
    или игнорируя регистр символов.

    - boolean regionMatches(int toffset, String other, int ooffset, int len):
        toffset - начальный индекс подстроки в текущей строке, с которого начинается сравнение.
        other - строка, с которой происходит сравнение.
        ooffset - начальный индекс в строке other, с которого начинается сравнение.
        len - количество символов, которые нужно сравнить.
            Этот метод сравнивает подстроки без учета регистра символов.

    - boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len):
        ignoreCase - логический флаг, указывающий, следует ли игнорировать регистр символов при
            сравнении (true для игнорирования).
        toffset, other, ooffset, len - те же параметры, что и в первом варианте.


Методы startsWith() и endsWith():
    - Методы startsWith() и endsWith() в Java являются частью класса String и предоставляют
    простой способ проверить, начинается или заканчивается ли строка с определенной подстроки.
    Эти методы часто используются для проверки форматов, префиксов, суффиксов и других условий,
    связанных с содержанием строк.

    - boolean startsWith(String prefix)
    - boolean startsWith(String prefix, int toffset)
        - prefix: подстрока, с которой должна начинаться строка.
        - toffset: позиция в строке, с которой начинается проверка.

    - boolean endsWith(String suffix)
        - suffix: подстрока, которой должна заканчиваться строка.



Метод compareTo ( ):
    - Метод compareTo() в Java класса String используется для
    лексикографического сравнения двух строк. Это означает,
    что строки сравниваются посимвольно, основываясь на значениях
    Unicode каждого символа. Метод возвращает целочисленное значение,
    которое указывает на отношение одной строки к другой.

    - int compareTo(String anotherString) // anotherString: строка, с которой происходит сравнение;

    - Метод compareTo() широко используется в задачах сортировки и в ситуациях,
    когда нужно упорядочивать строки по алфавиту или по другим критериям.
    Он также является частью интерфейса Comparable, что делает строки
    натурально упорядочиваемыми и позволяет использовать их в коллекциях,
    которые автоматически упорядочивают элементы, таких как TreeSet или TreeMap.

Поиск в символьных строках:
    - Метод indexOf() используется для поиска индекса первого вхождения указанного
    символа или подстроки в строке. Если символ или подстрока не найдены, метод возвращает -1.

    - Метод lastIndexOf() похож на indexOf(), но возвращает индекс последнего вхождения
    символа или подстроки в строке.

Метод substring():
    - String substring(int beginIndex):
        Возвращает подстроку, начиная с указанного индекса beginIndex и до конца строки.
        Если beginIndex равен длине строки, возвращается пустая строка.
        Если beginIndex меньше нуля или больше длины строки, выбрасывается StringIndexOutOfBoundsException.

    - String substring(int beginIndex, int endIndex):
        Возвращает подстроку, начиная с индекса beginIndex и заканчивая индексом
        endIndex - 1. Таким образом, длина возвращаемой подстроки равна endIndex - beginIndex.
        endIndex должен быть больше или равен beginIndex, иначе будет выброшено исключение StringIndexOutOfBoundsException.
        Если beginIndex или endIndex меньше нуля, или endIndex больше длины строки, также будет выброшено исключение.

Метод concat ( ):
    - String concat(String строка);
    - String s1 = "one";
    String s2 = s1.concat("two");
    - Метод concat() в Java класса String предназначен для объединения строк.
    Этот метод добавляет одну строку в конец другой и возвращает новую строку,
    которая является результатом этого объединения.

Метод replace ( ):
    - String replace (char исходный, char заменяемый);
    - Метод replace() в классе String Java предназначен для замены всех
    вхождений одного символа или подстроки на другой символ или подстроку в исходной строке.


Метод trim():
    - Метод trim() в Java класса String используется для удаления начальных и конечных
    пробелов из строки. Этот метод возвращает новую строку, из которой удалены все
    пробелы (и другие символы, чей код меньше или равен U+0020 в Unicode) с начала
    и конца исходной строки.
        -Применение trim()
         Метод trim() часто используется в следующих случаях:
            -> Обработка пользовательского ввода: При вводе данных пользователем, таких как
                логин или пароль, часто бывает полезно удалить лишние пробелы, чтобы избежать
                ошибок при валидации.
            -> Парсинг данных: При чтении данных из файлов или внешних источников trim() может
                помочь убрать лишние пробелы в начале и конце строк, что упрощает дальнейшую обработку.
            -> Унификация строк: Перед сравнением или сохранением данных в базу данных иногда
                требуется убрать начальные и конечные пробелы, чтобы данные были в единообразном формате.

Метод valueOf() в Java — это статический метод, который преобразует различные типы данных в
    их строковое представление. Этот метод предоставляется классом String и другими классами-оболочками
    для примитивных типов, такими как Integer, Double, Boolean и др. Метод valueOf() часто используется
    для преобразования примитивов или объектов в строки, что очень удобно для вывода данных, логирования
    или других операций с текстом.

    - Метод valueOf() перегружен для обеспечения поддержки всех примитивных типов и объектов.
        Вот несколько основных форм этого метода:

      String.valueOf(boolean b) — преобразует значение типа boolean в строку "true" или "false".
      String.valueOf(char c) — преобразует символ в строку, содержащую этот один символ.
      String.valueOf(char[] data) — преобразует массив символов в строку.
      String.valueOf(char[] data, int offset, int count) — преобразует часть массива символов в строку,
        начиная с индекса offset и длиной count.
      String.valueOf(double d) — преобразует значение типа double в строку.
      String.valueOf(float f) — преобразует значение типа float в строку.
      String.valueOf(int i) — преобразует значение типа int в строку.
      String.valueOf(long l) — преобразует значение типа long в строку.
      String.valueOf(Object obj) — преобразует объект в строку, вызывая его метод toString().
        Если объект равен null, то возвращается строка "null".

Изменение регистра символов в строке:
    - В Java для изменения регистра символов в строке предоставляются два основных метода класса
    String: toUpperCase() и toLowerCase(). Эти методы позволяют преобразовать все символы
    строки в верхний или нижний регистр соответственно.



Соединение символьных строк:
     - static String join(CharSequence delimiter, CharSequence... elements)
     - Метод join() класса String в Java является статическим методом, который
     был введен в JDK 8. Этот метод позволяет соединять несколько символьных
     строк, используя указанный разделитель. Он очень удобен для создания строк
     из набора элементов, разделённых коммами, пробелами или любым другим символом.
        delimiter: символ или последовательность символов, которые будут использованы в качестве
        разделителя между элементами.
        elements: элементы, которые необходимо соединить. Это переменное количество аргументов
        типа CharSequence, что означает, что можно передавать любое количество строк или объектов,
        реализующих интерфейс CharSequence.

Представлена таблица с дополнительными методами из класса String в Java:
    - codePointAt(int i)
        Возвращает кодовую точку Unicode по указанной позиции i.
    - codePointBefore(int i)
        Возвращает кодовую точку Unicode перед указанной позицией i.
    - codePointCount(int начало, int конец)
        Возвращает количество кодовых точек в указанной части строки.
    - contains(CharSequence s)
        Возвращает true, если строка содержит указанную последовательность символов s.
    - contentEquals(CharSequence s)
        Возвращает true, если строка содержит точно такую же последовательность символов, что и s.
    - contentEquals(StringBuffer s)
        Возвращает true, если строка содержит точно такую же последовательность символов, что и содержимое StringBuffer s.
    - format(String format, Object... args)
        Возвращает строку, форматированную согласно указанному формату и аргументам.
    - format(Locale region, String format, Object... args)
        То же, что и предыдущий метод, но с учётом локали region.
    - isEmpty()
        Возвращает true, если строка пуста.
    - matches(String regex)
        Возвращает true, если строка соответствует регулярному выражению regex.
    - offsetByCodePoints(int начало, int число)
        Возвращает индекс позиции, смещённой на заданное число кодовых точек от начальной позиции начало.
    - replaceFirst(String regex, String новая_строка)
        Заменяет первое вхождение подстроки, соответствующей регулярному выражению regex, на новая_строка.
    - replaceAll(String regex, String новая_строка)
        Заменяет все вхождения подстрок, соответствующих регулярному выражению regex, на новая_строка.
    - split(String regex)
        Разделяет строку по регулярному выражению regex и возвращает массив строк, содержащих полученные части.

Методы length ( ) и capacity ( ):
    - int length();
    - int capacity();

        Метод length() для строк и массивов
        1. Строки (String)
            Метод length() в классе String возвращает количество символов в строке.

        2. Массивы
        Для массивов, length является свойством (а не методом), которое возвращает количество
            элементов в массиве.

        Метод capacity() используется в классах StringBuilder и StringBuffer для получения
            текущей емкости буфера. Емкость — это количество символов, которое буфер может
            вместить без дополнительного расширения.

Метод ensureCapacity()
    - используется в классах StringBuilder и StringBuffer в Java для управления емкостью
        внутреннего буфера. Этот метод предназначен для того, чтобы гарантировать, что буфер
            имеет как минимум указанную емкость.

                void ensureCapacity();

    - Когда вызывается ensureCapacity():
        Проверка текущей емкости: Если текущая емкость буфера уже равна или превышает
            указанное значение, метод не делает ничего.
        Расширение буфера: Если текущая емкость меньше указанной, то StringBuilder или
            StringBuffer увеличивает емкость. Новая емкость обычно вычисляется как
            (старая емкость * 2) + 2, хотя может быть увеличена более значительно,
            если это необходимо для достижения указанной емкости.

Метод setLength ( ):
    - void setLength(int длина)
        - параметр длина обозначает конкретную длину символьной строки;

Методы charAt ( ) и setCharAt ( ):
    - char charAt(int где);
    - void setCharAt( int где, char символ);

    - Метод charAt() используется в классе String и в классах-наследниках интерфейса
        CharSequence (включая StringBuilder и StringBuffer). Этот метод возвращает
        символ по указанному индексу.
        - public char charAt(int index)

    - Метод setCharAt() доступен в классах StringBuilder и StringBuffer, которые позволяют
        модифицировать своё содержимое. Метод изменяет символ в буфере по указанному индексу.
            public void setCharAt(int index, char ch)


Метод getChars ( ):
    - void getChars (int начало_источника, int конец_источника, char адресат[], int начало_адресата)
    - Метод getChars() в классах String, StringBuffer, и StringBuilder в Java позволяет
        копировать подстроку в массив символов.
    -

Метод append ( ):
    - Метод append() в классах StringBuffer и StringBuilder в Java является одним из ключевых
        методов для работы с изменяемыми последовательностями символов.Метод append() в классах
            StringBuffer и StringBuilder в Java является одним из ключевых методов для работы с
                изменяемыми последовательностями символов.
    - Перегруженные варианты метода append():
        - append(String str) — добавляет строку;
        - append(int i) — добавляет строковое представление целого числа.
        - append(Object obj) — добавляет строковое представление объекта (вызывается String.valueOf(obj)).

Метод insert():
    - позволяет вставлять различные типы данных в указанную позицию внутри существующего текста.
    - insert(int offset, String str) — вставляет строку в указанную позицию.
      insert(int offset, char c) — вставляет символ в указанную позицию.
      insert(int offset, Object obj) — вставляет строковое представление объекта в указанную позицию.


