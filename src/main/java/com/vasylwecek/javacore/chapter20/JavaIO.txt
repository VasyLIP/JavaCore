







>>> Class ByteArrayInputStream:
    constructors:
        1. ByteArrayInputStream(byte array[])
        2. ByteArrayInputStream(byte array[], int start, int bytes.length)

>>> Class ByteArrayOutputStream:
    constructors:
        1. ByteArrayOutputStream();
        2. ByteArrayOutputStream(int numbers_byte);


173. Когда используют классы BufferedInputStream и BufferedOutputStream?
Классы BufferedInputStream и BufferedOutputStream в Java используются для увеличения производительности
    при чтении и записи данных из/в потока.

    1. BufferedInputStream обеспечивает буферизацию данных при чтении из потока. Он читает
        данные из потока порциями и хранит их в буфере, чтобы уменьшить количество обращений к
        физическому устройству ввода-вывода. Это увеличивает производительность, особенно при работе
        с медленными вводом-выводными устройствами, такими как диски или сеть. Кроме того,
        BufferedInputStream позволяет использовать методы mark() и reset(), что обеспечивает
        возможность повторного чтения данных из потока.

    2. BufferedOutputStream обеспечивает буферизацию данных при записи в поток. Он записывает
        данные в буфер и отправляет их на устройство ввода-вывода со скоростью, которая оптимизирована
        для устройства. Это также уменьшает количество обращений к устройству ввода-вывода, что
        повышает производительность.

        При использовании BufferedInputStream и BufferedOutputStream следует учитывать, что они
            добавляют некоторую задержку в работу программы, связанную с буферизацией данных. Эта
            задержка может быть незначительной, но может оказать влияние на производительность при
            обработке больших объемов данных или при работе с медленными устройствами ввода-вывода.

        Таким образом, BufferedInputStream и BufferedOutputStream рекомендуется использовать для
            повышения производительности при чтении и записи данных из/в потока. Однако перед их
            использованием следует учитывать особенности конкретной задачи и оценивать возможные
            преимущества и недостатки.

>>> Класс BufferedOutputStream

	•	Назначение: Повышает производительность ввода-вывода путем сокращения количества операций
	    записи данных.
	•	Метод flush(): Записывает все данные из буфера в поток вывода немедленно.
	•	Конструкторы:
	        1.	BufferedOutputStream(OutputStream out): Создает поток вывода с буфером по умолчанию.
	        2.	BufferedOutputStream(OutputStream out, int size): Создает поток вывода с указанным
	            размером буфера.

>>> Класс PushbackInputStream

	•	Назначение: Реализует механизм возврата байта в поток ввода, что позволяет предварительно
	        просматривать данные.
	•	Конструкторы:
	        1.	PushbackInputStream(InputStream int ): Создает поток ввода с возможностью возврата
	            одного байта.
	        2.	PushbackInputStream(InputStream int, int size): Создает поток ввода с буфером возврата
	            заданного размера.
	•	Метод unread(): Возвращает байты обратно в поток ввода.
	•	void unread(int b): Возвращает один байт.
	•	void unread(byte[] buffer): Возвращает массив байтов.
	•	void unread(byte[] buffer, int offset, int length): Возвращает часть массива байтов, начиная
	    с позиции смещения.

>>> Класс SequenceInputStream

	Назначение: Объединяет несколько потоков ввода типа InputStream в один последовательный поток.
	Конструкторы:
	    1.SequenceInputStream(InputStream s1, InputStream s2): Принимает два потока ввода.
	    2.SequenceInputStream(Enumeration<? extends InputStream> e): Принимает перечисление
	        (Enumeration) объектов InputStream.
	Принцип работы:
	•	Сначала считывает данные из первого потока до его исчерпания.
	•	Затем переходит к следующему потоку.
	•	Если используется перечисление, то последовательно читает данные из всех потоков до
	        исчерпания последнего.
	•	Закрытие SequenceInputStream приводит к закрытию всех объединенных потоков.

	Основные моменты:
    	1.SequenceInputStream:
    	    •Объединяет несколько потоков InputStream.
    	    •Считывает данные последовательно из каждого потока до его исчерпания.
    	    •Закрытие SequenceInputStream закрывает все связанные потоки.
    	2.Пример использования:
    	    •Пример демонстрирует последовательное чтение данных из нескольких файлов.
    	    •Реализована обработка ошибок ввода-вывода и закрытия потоков.

>>> Класс PrintStream
    Назначение: Обеспечивает вывод данных в консоль или файл, аналогично System.out.
    Интерфейсы: Appendable, AutoCloseable, Closeable, Flushable.
    Конструкторы PrintStream:
        1. PrintStream(OutputStream out): Создает PrintStream, направляющий вывод в указанный поток
            OutputStream.
        2. PrintStream(OutputStream out, boolean autoFlush): Создает PrintStream с возможностью
            автоматической очистки буфера при записи новой строки (\n), массива байтов или вызове
            метода println().
        3. PrintStream(OutputStream out, boolean autoFlush, String charset) throws
            UnsupportedEncodingException: Создает PrintStream с заданной кодировкой символов и
            автоочисткой буфера.

    Конструкторы для вывода в файл:
        1. PrintStream(File file) throws FileNotFoundException: Создает PrintStream, направляющий
            вывод в указанный файл.
        2. PrintStream(File file, String charset) throws FileNotFoundException,
            UnsupportedEncodingException: Создает PrintStream с указанной кодировкой символов.
        3. PrintStream(String fileName) throws FileNotFoundException: Создает PrintStream по имени файла.
        4. PrintStream(String fileName, String charset) throws FileNotFoundException,
            UnsupportedEncodingException: Создает PrintStream по имени файла с указанной кодировкой
            символов.

    Примечание: При создании потока вывода для файла, если файл уже существует, он будет перезаписан.
    Методы PrintStream
        Методы print() и println():
            Поддерживают вывод всех типов данных, включая объекты (через метод toString()).

        Метод printf():
            Позволяет форматировать вывод данных, аналогично функции printf() в C/C++.

    Две формы метода:
        1. PrintStream printf(String format, Object... args): Форматирует строку и выводит данные в
            стандартный поток вывода.
        2. PrintStream printf(Locale locale, String format, Object... args): Форматирует строку с
        учетом региональных настроек и выводит данные в стандартный поток вывода.

    Основные особенности PrintStream
    1. Автоматическая очистка буфера вывода, если включена.
    2. Поддержка вывода всех типов данных, включая объекты.
    3. Метод printf() для форматированного вывода, аналогичный функции printf() в C/C++.
    4. Возможность указания кодировки символов при создании объекта.

Класс RandomAccessFile инкапсулирует файл произвольного доступа и реализует интерфейсы DataInput и
    DataOutput, а также AutoCloseable и Closeable. Он позволяет позиционировать указатель файла на
    любую позицию, поддерживая как чтение, так и запись данных.

    Основные характеристики:
        Конструкторы:
            RandomAccessFile(File объект_файла, String доступ) - принимает объект типа File и строку,
                определяющую тип доступа.
            RandomAccessFile(String имя_файла, String доступ) - принимает имя файла в виде строки
                и строку, определяющую тип доступа.
        Типы доступа:
            "r" - только чтение.
            "rw" - чтение и запись.
            "rws" - чтение и запись с немедленным выводом изменений данных или метаданных на физическое устройство.
        Основные методы:
            void seek(long новая_позиция) throws IOException:
                Устанавливает указатель файла на указанную позицию (в байтах от начала файла).
                Следующая операция чтения или записи выполняется с этой позиции.

            void setLength(long длина) throws IOException:
                Устанавливает заданную длину файла.
                Может удлинять или укорачивать файл. В случае удлинения добавляемая часть не определена.

        Особенности:
            Класс не наследуется от InputStream или OutputStream.
            Поддерживает стандартные методы ввода-вывода для работы с файлами произвольного доступа.
            Обеспечивает позиционирование для гибкой работы с файлами.

        Применение:
        Класс RandomAccessFile используется для:
            1. Чтения и записи данных в файл в произвольном порядке.
            2. Управления указателем файла для изменения позиции чтения/записи.
            3. Изменения длины файла по мере необходимости.

