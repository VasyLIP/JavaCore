Основные пакеты системы ввода-вывода NIO:
    java.nio -              Пакет верхнего уровня, инкапсулирующий различные типы буферов для хранения данных.
    java.nio.channels -	    Поддерживает каналы, которые открывают соединения для ввода-вывода.
    java.nio.channels.spi -	Поддерживает поставщиков услуг для каналов.
    java.nio.charset - 	    Инкапсулирует наборы символов и поддерживает кодеры и декодеры для преобразования символов и байтов.
    java.nio.charset.spi - 	Поддерживает поставщиков услуг для наборов символов.
    java.nio.file -     	Поддерживает ввод-вывод в файлы.
    java.nio.file.attribute-Поддерживает атрибуты файлов.
    java.nio.file.spi - 	Поддерживает поставщиков услуг для файловых систем.

    Буферы - определены в пакете java.nio. Все буферы являются подклассами класса Buffer,
        в котором определяются основные функциональные возможности, такие как текущая позиция,
        предел и емкость.
        Текущая позиция: Определяет индекс в буфере, с которого начнется следующая операция чтения или записи.
        Предел: Определяет значение индекса за последней доступной ячейкой в буфере.
        Емкость: Определяет количество элементов, которые можно хранить в буфере.
        Основные методы класса Buffer:
            int capacity()	Возвращает количество элементов, которые можно хранить в буфере.
            Buffer clear()	Очищает буфер и возвращает ссылку на него.
            Buffer flip()	Устанавливает текущую позицию в качестве предела и устанавливает текущую позицию в ноль.
            boolean hasArray()	Возвращает true, если буфер поддерживается массивом.
            boolean hasRemaining()	Возвращает true, если в буфере есть оставшиеся элементы.
            boolean isDirect()	Возвращает true, если буфер является прямым.
            boolean isReadOnly()	Возвращает true, если буфер предназначен только для чтения.
            int limit()	Возвращает предел буфера.
            Buffer limit(int newLimit)	Устанавливает новый предел буфера.
            Buffer mark()	Устанавливает метку в текущей позиции.
            int position()	Возвращает текущую позицию буфера.
            Buffer position(int newPosition)	Устанавливает новую позицию буфера.
            int remaining()	Возвращает количество оставшихся элементов до предела.
            Buffer reset()	Устанавливает позицию на ранее установленную метку.
            Buffer rewind()	Устанавливает позицию в ноль.

        Основные типы буферов:
            ByteBuffer
            CharBuffer
            DoubleBuffer
            FloatBuffer
            IntBuffer
            LongBuffer
            ShortBuffer
            MappedByteBuffer

    Каналы - в системе ввода-вывода NIO определены в пакете java.nio.channels. Канал
        представляет собой открытое соединение с источником или адресатом ввода-вывода.
        Все каналы реализуют интерфейс Channel, который расширяет интерфейс Closeable,
        а начиная с JDK 7 также интерфейс AutoCloseable. Это позволяет управлять каналами
        в блоке оператора try с ресурсами, где канал автоматически закрывается, когда
        он больше не нужен.

        Метод getChannel() - поддерживается следующими классами ввода-вывода:

            DatagramSocket
            FileInputStream
            FileOutputStream
            RandomAccessFile
            ServerSocket
            Socket

    Интерфейс Path — одно из наиболее важных дополнений системы ввода-вывода NIO.2, поскольку
        он инкапсулирует путь к файлу и служит связующим звеном для большинства новых файловых
        средств в системе ввода-вывода NIO.2. Path описывает расположение файла в структуре
        каталогов.

    Интерфейс Path находится в пакете java.nio.file и наследует интерфейсы Watchable,
        Iterable<Path> и Comparable<Path>. Интерфейс Watchable описывает объект, который
        можно наблюдать и изменять, а интерфейсы Iterable и Comparable позволяют итерировать
        и сравнивать пути.

        boolean endsWith(String путь)	Возвращает true, если вызывающий объект типа Path
            оканчивается указанным путем.
        boolean endsWith(Path путь)	Возвращает true, если вызывающий объект типа Path
            оканчивается указанным путем.
        Path getFileName()	Возвращает имя файла, связанное с вызывающим объектом типа Path.
        Path getName(int индекс)	Возвращает элемент пути по указанному индексу.
        int getNameCount()	Возвращает количество элементов в пути (кроме корневого).
        Path getParent()	Возвращает родительский путь, или null, если родительского
            пути нет.
        Path getRoot()	Возвращает корневой каталог пути, или null, если корневого каталога нет.
        boolean isAbsolute()	Возвращает true, если путь является абсолютным.
        Path resolve(Path путь)	Если указанный путь является абсолютным, возвращает его.
            Если нет, предваряет его корневым каталогом вызывающего объекта.
        Path resolve(String путь)	То же, что и выше, но принимает строку.
        boolean startsWith(String путь)	Возвращает true, если путь начинается с указанного пути.
        boolean startsWith(Path путь)	То же, что и выше, но принимает объект Path.
        Path toAbsolutePath()	Возвращает абсолютный путь.
        String toString()	Возвращает строковое представление пути.

    Интерфейс Path предоставляет удобный способ работы с путями к файлам в системе
        ввода-вывода NIO.2. Он инкапсулирует путь к файлу и предоставляет методы для
        манипуляции этими путями. Использование интерфейса Path упрощает работу с файлами
        и каталогами, обеспечивая мощные и гибкие возможности для работы с файловыми
        системами в Java.

    Класс Files - предоставляет большинство действий, которые можно выполнять над файлами.
        Все методы класса Files являются статическими и используют объект типа Path для
        указания файла, над которым выполняются операции. Этот класс обладает обширным
        набором методов для работы с файлами и каталогами, включая методы для создания,
        копирования, удаления и получения информации о файлах.

        static Path copy(Path источник, Path адресат, CopyOption... способы) throws IOException	-
            Копирует файл или директорию из источника в адресат с заданными параметрами копирования.
        static Path createDirectory(Path путь, FileAttribute<?>... атрибуты) throws IOException -
            Создает новый каталог по указанному пути с заданными атрибутами.
        static Path createFile(Path путь, FileAttribute<?>... атрибуты) throws IOException -
            Создает новый файл по указанному пути с заданными атрибутами.
        static void delete(Path путь) throws IOException -
            Удаляет файл или директорию по указанному пути.
        static boolean exists(Path путь, LinkOption... параметры) -
        	 Возвращает true, если файл или директория существуют по указанному пути, иначе false.
        static boolean isDirectory(Path путь, LinkOption... параметры) -
        	Возвращает true, если путь указывает на директорию, иначе false.
        static boolean isExecutable(Path путь) -
        	Возвращает true, если файл исполняемый, иначе false.
        static boolean isHidden(Path путь) throws IOException -
        	Возвращает true, если файл скрыт, иначе false.
        static boolean isReadable(Path путь) -
        	Возвращает true, если файл доступен для чтения, иначе false.
        static boolean isWritable(Path путь) -
        	Возвращает true, если файл доступен для записи, иначе false.
        static Path move(Path источник, Path адресат, CopyOption... способы) throws IOException -
        	Перемещает файл или директорию из источника в адресат с заданными параметрами.
        static long size(Path путь) throws IOException -
        	Возвращает размер файла по указанному пути.
        static SeekableByteChannel newByteChannel(Path путь, OpenOption... способы) throws IOException -
        	Открывает файл для чтения и/или записи и возвращает канал SeekableByteChannel.
        static DirectoryStream<Path> newDirectoryStream(Path путь) throws IOException -
        	Открывает директорию и возвращает поток объектов типа Path, представляющих содержимое директории.
        static InputStream newInputStream(Path путь, OpenOption... способы) throws IOException -
        	Открывает файл для чтения и возвращает поток ввода InputStream.
        static OutputStream newOutputStream(Path путь, OpenOption... способы) throws IOException -
        	Открывает файл для записи и возвращает поток вывода OutputStream.

    Интерфейсы атрибутов файлов:
        Система ввода-вывода NIO в Java предоставляет обширные возможности для работы с
        атрибутами файлов. Эти атрибуты включают время создания файла, время его последней
        модификации, размер файла и другие. Для организации атрибутов файлов в NIO используется
        иерархия интерфейсов, определенных в пакете java.nio.file.attribute. На вершине этой
        иерархии находится интерфейс BasicFileAttributes, который инкапсулирует атрибуты,
        применяемые в большинстве файловых систем.

        FileTime creationTime()	-
            Возвращает время создания файла. Если этот атрибут не поддерживается файловой
            системой, возвращается значение, зависящее от реализации.
        Object fileKey() -
        	Возвращает файловый ключ. Если этот атрибут не поддерживается файловой
        	системой, возвращается null.
        boolean isDirectory() -
            Возвращает true, если файл является каталогом.
        boolean isOther() -
        	Возвращает true, если файл является символической ссылкой или специальным файлом,
        	а не обычным файлом или каталогом.
        boolean isRegularFile() -
        	Возвращает true, если файл является обычным файлом, а не каталогом или
        	символической ссылкой.
        boolean isSymbolicLink() -
            Возвращает true, если файл является символической ссылкой.
        FileTime lastAccessTime() -
        	Возвращает время последнего доступа к файлу. Если этот атрибут не поддерживается
        	файловой системой, возвращается значение, зависящее от реализации.
        FileTime lastModifiedTime() -
        	Возвращает время последней модификации файла. Если этот атрибут не
        	поддерживается файловой системой, возвращается значение, зависящее от реализации.
        long size() -
        	Возвращает размер файла.

        Интерфейсы DosFileAttributes и PosixFileAttributes:
        Производными от интерфейса BasicFileAttributes являются интерфейсы
            DosFileAttributes и PosixFileAttributes.

            Методы интерфейса DosFileAttributes:
                Интерфейс DosFileAttributes описывает атрибуты, связанные с файловой системой
                FAT, которые были первоначально определены в файловой системе DOS.

        boolean isArchive()	Возвращает true, если файл помечен как архивный, иначе false.
        boolean isHidden()	Возвращает true, если файл помечен как скрытый, иначе false.
        boolean isReadOnly()	Возвращает true, если файл помечен как доступный только для чтения, иначе false.
        boolean isSystem()	Возвращает true, если файл помечен как системный, иначе false.

            Методы интерфейса PosixFileAttributes
                Интерфейс PosixFileAttributes инкапсулирует атрибуты, определенные по
                стандартам POSIX (Portable Operating System Interface). Методы этого
                интерфейса приведены в таблице ниже:

        GroupPrincipal group()	Возвращает группового владельца файла.
        UserPrincipal owner()	Возвращает владельца файла.
        Set<PosixFilePermission> permissions()	Возвращает полномочия доступа к файлу.


        Доступ к атрибутам файлов можно получить несколькими способами.
            Один из них — использование статического метода readAttributes(),
            определенного в классе Files.














































































































